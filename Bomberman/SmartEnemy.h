#pragma once
////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <memory>
#include "SmartMove.h"

////////////////////////////////////////////////////////////
class Robot;

////////////////////////////////////////////////////////////
/// \brief Smart enemy with ability of BFS
///
////////////////////////////////////////////////////////////
class SmartEnemy {
public:
	////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	////////////////////////////////////////////////////////////
	SmartEnemy();

	////////////////////////////////////////////////////////////
	/// \brief Destructor
	///
	////////////////////////////////////////////////////////////
	virtual ~SmartEnemy() = default;
	void setRobotPtr(const std::shared_ptr<Robot>& robot);
protected:
	std::weak_ptr<Robot> m_robot;
	SmartMove m_move;
	std::vector<Direction> m_directions;
	std::weak_ptr<Tile> m_path;
	bool m_collision;
	bool m_pathExist;
};
